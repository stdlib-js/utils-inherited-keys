{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport getOwnPropertyNames from '@stdlib/utils-property-names' ;\nimport getPrototypeOf from '@stdlib/utils-get-prototype-of' ;\nimport isEnumerable from '@stdlib/assert-is-enumerable-property' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's inherited enumerable property names.\n*\n* @param {*} value - input object\n* @param {PositiveInteger} [level] - inheritance level\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Array} a list of inherited enumerable property names\n*\n* @example\n* var keys = inheritedKeys( {} );\n*/\nfunction inheritedKeys( value, level ) {\n\tvar names;\n\tvar cache;\n\tvar obj;\n\tvar tmp;\n\tvar N;\n\tvar n;\n\tvar k;\n\tvar i;\n\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isPositiveInteger( level ) ) {\n\t\t\tthrow new TypeError( format( '0k84I', level ) );\n\t\t}\n\t\tN = level;\n\t} else {\n\t\tN = MAX_SAFE_INTEGER;\n\t}\n\tif ( value === null || value === void 0 ) {\n\t\treturn [];\n\t}\n\t// Get the value's prototype:\n\tobj = getPrototypeOf( value );\n\n\t// Walk the prototype chain collecting enumerable property names...\n\tnames = [];\n\tcache = {};\n\tn = 1;\n\twhile ( obj && n <= N ) {\n\t\ttmp = getOwnPropertyNames( obj );\n\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\tk = tmp[ i ];\n\t\t\tif (\n\t\t\t\thasOwnProp( cache, k ) === false &&\n\t\t\t\tisEnumerable( obj, k )\n\t\t\t) {\n\t\t\t\tnames.push( k );\n\t\t\t}\n\t\t\tcache[ k ] = true;\n\t\t}\n\t\tobj = getPrototypeOf( obj );\n\t\tn += 1;\n\t}\n\n\treturn names;\n}\n\n\n// EXPORTS //\n\nexport default inheritedKeys;\n"],"names":["inheritedKeys","value","level","names","cache","obj","tmp","N","n","k","i","arguments","length","isPositiveInteger","TypeError","format","MAX_SAFE_INTEGER","getPrototypeOf","getOwnPropertyNames","hasOwnProp","isEnumerable","push"],"mappings":";;2pBA4CA,SAASA,EAAeC,EAAOC,GAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKC,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAmBX,GACxB,MAAM,IAAIY,UAAWC,EAAQ,QAASb,IAEvCK,EAAIL,OAEJK,EAAIS,EAEL,GAAKf,QACJ,MAAO,GASR,IANAI,EAAMY,EAAgBhB,GAGtBE,EAAQ,GACRC,EAAQ,GACRI,EAAI,EACIH,GAAOG,GAAKD,GAAI,CAEvB,IADAD,EAAMY,EAAqBb,GACrBK,EAAI,EAAGA,EAAIJ,EAAIM,OAAQF,IAC5BD,EAAIH,EAAKI,IAEmB,IAA3BS,EAAYf,EAAOK,IACnBW,EAAcf,EAAKI,IAEnBN,EAAMkB,KAAMZ,GAEbL,EAAOK,IAAM,EAEdJ,EAAMY,EAAgBZ,GACtBG,GAAK,EAGN,OAAOL"}